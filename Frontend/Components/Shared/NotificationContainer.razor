@using Microsoft.AspNetCore.Components.Web
@using static Microsoft.AspNetCore.Components.Web.RenderMode
@using Artemis.Frontend.Services.Notification
@rendermode InteractiveServer
@inject NotificationService NotificationService
@implements IDisposable

<div class="notification-container">
    <div style="display:none">Debug: @_currentNotifications.Count notifications</div>

    @foreach (var notification in _currentNotifications)
    {
        <div class="notification @GetNotificationClass(notification.Type)" @key="notification.Id">
            <div class="notification-content">
                <div class="notification-message">@notification.Message</div>
                @if (notification.ShowCloseButton)
                {
                    <button class="notification-close" @onclick="() => NotificationService.Remove(notification.Id)">×</button>
                }
            </div>
        </div>
    }
</div>

@code {
    private List<Notification> _currentNotifications = new();

    protected override void OnInitialized()
    {
        _currentNotifications = NotificationService.Notifications.ToList();
        NotificationService.OnChange += HandleNotificationChange;
    }

    private async void HandleNotificationChange()
    {
        await InvokeAsync(() =>
        {
            _currentNotifications = NotificationService.Notifications.ToList();
            Console.WriteLine($"Updated notifications count: {_currentNotifications.Count}");
            StateHasChanged();
        });
    }

    private string GetNotificationClass(NotificationType type) => type switch
    {
        NotificationType.Success => "notification-success",
        NotificationType.Error => "notification-error",
        NotificationType.Warning => "notification-warning",
        NotificationType.Info => "notification-info",
        _ => string.Empty
    };

    public void Dispose()
    {
        NotificationService.OnChange -= HandleNotificationChange;
    }
}