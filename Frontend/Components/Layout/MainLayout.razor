@using Artemis.Frontend.Models.Navigation
@using Artemis.Frontend.Services.Authentication
@using Artemis.Frontend.Services.Navigation
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization

@attribute [Authorize]

@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject MenuStateService MenuState
@inject INavigationService NavigationService
@inject IJSRuntime JSRuntime
@implements IDisposable

<div class="page @(MenuState.IsExpanded ? "" : "collapsed")">
    <AuthorizeView>
        <Authorized>
            <div class="sidebar">
                <NavMenu />
            </div>
        </Authorized>
    </AuthorizeView>

    <main>
        <div class="top-row px-4">
            <AuthorizeView>
                <Authorized>
                    <div class="d-flex align-items-center">
                        <div class="user-info me-3">
                            @{
                                var displayName = context.User.Claims
                                .FirstOrDefault(c => c.Type == "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname")
                                ?.Value ?? context.User.Identity?.Name ?? "User";
                            }
                            <span>Welcome, @displayName</span>
                        </div>
                        <button class="btn btn-link" @onclick="HandleLogout">Logout</button>
                    </div>
                </Authorized>
                <NotAuthorized>
                    <a href="login" class="btn btn-link">Login</a>
                </NotAuthorized>
            </AuthorizeView>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code {

    protected override async Task OnInitializedAsync()
    {
        // Initial setup
        AuthStateProvider.AuthenticationStateChanged += async task =>
            await OnAuthenticationStateChanged(task);

        // Check current auth state and load menu if authenticated
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated ?? false)
        {
            await LoadMenuForUser();
        }
    }

    private async Task LoadMenuForUser()
    {
        try
        {
            var menus = await NavigationService.GetUserMenuAsync();
            MenuState.UpdateMenuGroups(menus);
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading menu: {ex.Message}");
        }
    }

    private async Task OnAuthenticationStateChanged(Task<AuthenticationState> task)
    {
        try
        {
            var state = await task;
            if (state.User.Identity?.IsAuthenticated ?? false)
            {
                await LoadMenuForUser();
            }
            else
            {
                MenuState.SetMenuGroups(new List<ApplicationGroup>());
            }
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating menu: {ex.Message}");
        }
    }

    private async Task HandleLogout()
    {
        if (AuthStateProvider is BlazorAuthStateProvider authProvider)
        {
            await authProvider.Logout();
            MenuState.SetMenuGroups(new List<ApplicationGroup>());
        }
    }

    public void Dispose()
    {
        AuthStateProvider.AuthenticationStateChanged -= async task =>
            await OnAuthenticationStateChanged(task);
    }
}