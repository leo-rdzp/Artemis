@using System.Reflection
@using System.ComponentModel.DataAnnotations
@using Artemis.Frontend.Models.Share
@using Microsoft.AspNetCore.Components.Forms
@using System.Linq.Expressions
@using Artemis.Frontend.Extensions
@using Artemis.Frontend.Services.Notification
@namespace Artemis.Frontend.Components.Shared
@inject NotificationService NotificationService
@typeparam TModel where TModel : class, new()

<div class="card compact-form small-form">
    <div class="card-header">        
    </div>
    <div class="card-body">
        <EditForm Model="@Model" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInvalidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary style="display: none" />

            @foreach (var property in GetModelProperties())
            {
                <div class="mb-3">
                    <label class="form-label">@GetDisplayName(property)</label>

                    @{
                        var propertyType = Nullable.GetUnderlyingType(property.PropertyType) ?? property.PropertyType;
                        var inputType = GetInputType(property);
                    }

                    @if (inputType == "select")
                    {
                        var value = GetTypedValue<string>(property);
                        <InputSelect TValue="string"
                                     Value="@value"
                                     ValueChanged="@(v => SetPropertyValue(property, v))"
                                     ValueExpression="@(() => value)"
                                     class="form-select">
                            @foreach (var option in GetSelectOptions(property))
                            {
                                <option value="@option.Value">@option.Text</option>
                            }
                        </InputSelect>
                    }
                    else if (inputType == "date")
                    {
                        var value = GetTypedValue<DateTime>(property);
                        <InputDate TValue="DateTime"
                                   Value="@value"
                                   ValueChanged="@(v => SetPropertyValue(property, v))"
                                   ValueExpression="@(() => value)"
                                   class="form-control" />
                    }
                    else if (inputType == "number")
                    {
                        var value = GetTypedValue<int>(property);
                        <InputNumber TValue="int"
                                     Value="@value"
                                     ValueChanged="@(v => SetPropertyValue(property, v))"
                                     ValueExpression="@(() => value)"
                                     class="form-control" />
                    }
                    else if (inputType == "checkbox")
                    {
                        var value = GetTypedValue<bool>(property);
                        <InputCheckbox TValue="bool"
                                       Value="@value"
                                       ValueChanged="@(v => SetPropertyValue(property, v))"
                                       ValueExpression="@(() => value)"
                                       class="form-check-input" />
                    }
                    else
                    {
                        var value = GetTypedValue<string>(property) ?? string.Empty;
                        <InputText Value="@value"
                                   ValueChanged="@(v => SetPropertyValue(property, v))"
                                   ValueExpression="@(() => value)"
                                   class="form-control" />
                    }

                    @{
                        var validationExpression = GetValueExpression<object>(property);
                    }
                    <ValidationMessage For="@validationExpression" />
                </div>
            }

            @if (ShowButtons)
            {
                <div class="d-flex justify-content-end">
                    @if (ShowCancelButton)
                    {
                        <button type="button" class="btn btn-option me-2" @onclick="HandleCancel">Cancel</button>
                    }
                    <button type="submit" class="btn btn-submit" disabled="@IsSubmitting">
                        @if (IsSubmitting)
                        {
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            <span>Submitting...</span>
                        }
                        else
                        {
                            @SubmitButtonText
                        }
                    </button>
                </div>
            }
        </EditForm>
    </div>
</div>

@code {
    [Parameter] public TModel Model { get; set; } = new();
    [Parameter] public EventCallback<TModel> OnSubmit { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }
    [Parameter] public bool ShowButtons { get; set; } = true;
    [Parameter] public bool ShowCancelButton { get; set; } = true;
    [Parameter] public string SubmitButtonText { get; set; } = "Save";
    [Parameter] public Dictionary<string, List<SelectOption>> SelectOptions { get; set; } = new();
    [Parameter] public string[] AllowedProperties { get; set; } = Array.Empty<string>();

    private bool IsSubmitting { get; set; }

    private IEnumerable<PropertyInfo> GetModelProperties()
    {
        var properties = typeof(TModel).GetProperties()
            .Where(p => p.CanWrite);

        var flattenedProperties = new List<PropertyInfo>();
        foreach (var property in properties)
        {
            if (property.PropertyType.IsClass &&
                property.PropertyType != typeof(string) &&
                !property.PropertyType.IsGenericType)
            {
                var nestedProperties = property.PropertyType.GetProperties()
                    .Where(p => p.CanWrite && AllowedProperties.Contains($"{property.Name}.{p.Name}"));
                flattenedProperties.AddRange(nestedProperties);
            }
            else if (AllowedProperties.Contains(property.Name))
            {
                flattenedProperties.Add(property);
            }
        }
        return flattenedProperties;
    }

    private string GetDisplayName(PropertyInfo property)
    {
        var displayAttribute = property.GetCustomAttribute<DisplayAttribute>();
        var parentType = property.DeclaringType;
        var prefix = parentType != typeof(TModel) ? $"({parentType?.Name.Replace("DTO","")}) " : "";
        return prefix + (displayAttribute?.Name ?? property.Name.SplitCamelCase());
    }

    private string GetInputType(PropertyInfo property)
    {
        var type = Nullable.GetUnderlyingType(property.PropertyType) ?? property.PropertyType;

        if (type.IsEnum || SelectOptions.ContainsKey(property.Name))
            return "select";
        if (type == typeof(DateTime))
            return "date";
        if (type == typeof(bool))
            return "checkbox";
        if (type == typeof(int) || type == typeof(decimal) || type == typeof(double))
            return "number";

        return "text";
    }

    private T GetTypedValue<T>(PropertyInfo property)
    {
        object? value;
        if (property.DeclaringType != typeof(TModel))
        {
            var parentProperty = typeof(TModel).GetProperties()
                .FirstOrDefault(p => p.PropertyType == property.DeclaringType);
            var parent = parentProperty?.GetValue(Model);
            value = parent != null ? property.GetValue(parent) : null;
        }
        else
        {
            value = property.GetValue(Model);
        }
        return value == null ? default! : (T)value;
    }

    private Expression<Func<T>> GetValueExpression<T>(PropertyInfo property)
    {
        // Create a parameter for the model
        var modelParam = Expression.Parameter(typeof(TModel), "model");
        Expression propertyAccess;

        if (property.DeclaringType != typeof(TModel))
        {
            var parentProp = typeof(TModel).GetProperties()
                .First(p => p.PropertyType == property.DeclaringType);

            var parentAccess = Expression.Property(Expression.Constant(Model), parentProp);
            propertyAccess = Expression.Property(parentAccess, property);
        }
        else
        {
            propertyAccess = Expression.Property(Expression.Constant(Model), property);
        }

        var converted = Expression.Convert(propertyAccess, typeof(T));
        return Expression.Lambda<Func<T>>(converted);
    }

    private void SetPropertyValue(PropertyInfo property, object? value)
    {
        if (property.DeclaringType != typeof(TModel))
        {
            var parentProperty = typeof(TModel).GetProperties()
                .FirstOrDefault(p => p.PropertyType == property.DeclaringType);
            var parent = parentProperty?.GetValue(Model);
            if (parent == null)
            {
                parent = Activator.CreateInstance(property.DeclaringType!);
                parentProperty?.SetValue(Model, parent);
            }
            property.SetValue(parent, value);
        }
        else
        {
            property.SetValue(Model, value);
        }
    }

    private IEnumerable<SelectOption> GetSelectOptions(PropertyInfo property)
    {
        if (SelectOptions.ContainsKey(property.Name))
            return SelectOptions[property.Name];

        var type = Nullable.GetUnderlyingType(property.PropertyType) ?? property.PropertyType;
        if (type.IsEnum)
        {
            return Enum.GetValues(type)
                .Cast<object>()
                .Select(value => new SelectOption
                    {
                        Value = value.ToString() ?? string.Empty,
                        Text = (value.ToString() ?? string.Empty).SplitCamelCase()
                    });
        }

        return new List<SelectOption>();
    }

    private void HandleInvalidSubmit(EditContext context)
    {
        var messages = context.GetValidationMessages();
        if (messages.Any())
        {
            NotificationService.ShowError(string.Join("<br/>", messages));
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            IsSubmitting = true;
            await OnSubmit.InvokeAsync(Model);
        }
        catch (Exception ex)
        {
            NotificationService.ShowError($"An error occurred while submitting the form: {ex.Message}");
        }
        finally
        {
            IsSubmitting = false;
        }
    }

    private async Task HandleCancel()
    {
        try
        {
            await OnCancel.InvokeAsync();
        }
        catch (Exception ex)
        {
            NotificationService.ShowError($"An error occurred while canceling: {ex.Message}");
        }
    }    
}